/***************************************************************************

    Akatab.gdl
    Graphite source code for Akatab

***************************************************************************/

#include "stddef.gdh"
ScriptDirection = HORIZONTAL_LEFT_TO_RIGHT;
Bidi = true;

/////////////////////////////////
//
//  Features
//
/////////////////////////////////

#define bool default = ffalse; \
    settings { \
        ffalse { \
            value = 0; \
            name.1033 = string("False"); \
        } \
        ftrue { \
            value = 1; \
            name.1033 = string("True"); \
        } \
    }

#define boolWDefTrue default = ftrue; \
    settings { \
        ftrue { \
            value = 0; \
            name.1033 = string("True"); \
        } \
        ffalse { \
            value = 1; \
            name.1033 = string("False"); \
        } \
    }

table(feature)

f_2D30 {
    id = "cv01";
    name.1033 = string("Alternate YA (empty circle)");  // A
    bool
}

f_2D3C {
    id = "cv02";
    name.1033 = string("Alternate YAF");  // F
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard  (open left and right sides)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1  (I-shape)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (open top and bottom)");
        }
    }
}

f_2D34 {
    id = "cv03";
    name.1033 = string("Alternate YAGHH (round bottom)");  // GHH
    bool
}

f_2D50 {
    id = "cv04";
    name.1033 = string("Alternate YAGN (lowered bottom stroke)");  // GN
    bool
}

f_2D53 {
    id = "cv05";
    name.1033 = string("Alternate YU (short strokes)");  // W
    bool
}

f_2D63 {
    id = "cv06";
    name.1033 = string("Alternate YAZ (squared)");  // Z
    bool
}

f_2D4B {
    id = "cv07";
    name.1033 = string("Alternate AHAGGAR YAZH (squared)");  // ZH
    bool
}

f_2D31 {
    id = "cv08";
    name.1033 = string("Alternate YAB (rectangle style)");  // B
    bool
}

f_2D33 {
    id = "cv09";
    name.1033 = string("Alternate YAG (rounded top)");  // G
    bool
}

f_2D36 {
    id = "cv10";
    name.1033 = string("Alternate YAJ (lower dots)");  // J
    bool
}

f_2D40 {
    id = "cv11";
    name.1033 = string("Alternate YAH (rectangle style)");  // Tuareg YAB (H)
    bool
}

f_2D5B {
    id = "cv12";
    name.1033 = string("Alternate YASH (8 shape)");  // SH
    bool
}

f_2D5F {
    id = "cv13";
    name.1033 = string("Alternate YATT (F shape)");  // TT
    bool
}

f_2D38 {
    id = "cv15";
    name.1033 = string("Alternate YADH (rounded bottom)");  // DH
    bool
}

f_punct {
    id = "cv20";
    name.1033 = string("Alternate comma exclam and period");  // from publications circa 1954
    bool
}


// Biconsonant features

f_2D31_2D5C {
    id = "cv31";
    name.1033 = string("Alternate YAB YAT");  // BT
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (exterior T)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate (interior T)");
        }
    }
}

f_2D54_2D5C {
    id = "cv32";
    name.1033 = string("Alternate YAR YAT");  // RT
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (exterior T)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1 (large interior T)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (small interior T)");
        }
    }
}

f_2D59_2D5C {
    id = "cv33";
    name.1033 = string("Alternate YAS YAT");  // ST
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (exterior T)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1 (large interior T)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (small interior T)");
        }
    }
}

f_2D4E_2D5C {
    id = "cv34";
    name.1033 = string("Alternate YAM YAT");  // MT
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (low T)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate (middle T)");
        }
    }
}

f_2D3C_2D5C {
    id = "cv35";
    name.1033 = string("Alternate YAF YAT");  // FT
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (low T)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1 (double bar, middle exterior T)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (single bar, middle interior T)");
        }
        alt3 {
            value = 3;
            name.1033 = string("Alternate 3 (open top and bottom, interior T)");
        }
    }
}

f_2D4F_2D3E {
    id = "cv36";
    name.1033 = string("Alternate YAN Tuareg YAK");  // NK (Tuareg)
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (single dot cluster)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate (double dot cluster)");
        }
    }
}

f_2D4F_2D5C {
    id = "cv37";
    name.1033 = string("Alternate YAN YAT");  // NT
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (side T)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1 (side bar)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (top bar)");
        }
    }
}

f_2D4D_2D5C {
    id = "cv38";
    name.1033 = string("Alternate YAL YAT");  // LT
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (external T)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1 (internal T)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (middle bar)");
        }
        alt3 {
            value = 3;
            name.1033 = string("Alternate 3 (X shape)");
        }
    }
}

f_2D53_2D5C {
    id = "cv39";
    name.1033 = string("Alternate YU YAT");  // WT
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (short T, left dots)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1 (tall T, left dots)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (tall T, cross dots)");
        }
    }
}

f_2D4C_2D5C {
    id = "cv40";
    name.1033 = string("Alternate Tuareg YAZH YAT");  // ZZHT
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (lower-right T)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1 (mid-right T)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (centered T)");
        }
    }
}

f_2D4F_2D37 {
    id = "cv41";
    name.1033 = string("Alternate YAN YAD");  // ND
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (YAN inside YAD)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate (up down pointers)");
        }
    }
}

f_2D4F_2D3C {
    id = "cv42";
    name.1033 = string("Alternate YAN YAF");  // NF
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (middle bar)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate 1 (top and bottom bars)");
        }
        alt2 {
            value = 2;
            name.1033 = string("Alternate 2 (no bars)");
        }
    }
}

f_2D4F_2D36 {
    id = "cv43";
    name.1033 = string("Alternate YAN YAJ");  // NJ
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (middle bar)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate (top and bottom dots)");
        }
    }
}

f_2D4F_2D59 {
    id = "cv44";
    name.1033 = string("Alternate YAN YAS");  // NS
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (left middle bar)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate (interior YAN)");
        }
    }
}

f_2D4F_2D4C {
    id = "cv45";
    name.1033 = string("Alternate YAN Tuareg YAZH");  // NZH (Tuareg)
    default = 0;
    settings {
        alt0 {
            value = 0;
            name.1033 = string("Standard (high bar)");
        }
        alt1 {
            value = 1;
            name.1033 = string("Alternate (exterior circles)");
        }
    }
}

endtable; // feature

/////////////////////////////////
//
//  Subsitutions
//
/////////////////////////////////

table(glyph)

// Biconsonant ligatures

// Components and ligature classes with beginning glyph YAN (U+2D4F)
c_2d4f_cons_comp = (
    g_yaghh_tifi  g_yaj_tifi  g_yad_tifi  g_yadh_tifi  g_yadd_tifi  
    g_yaf_tifi  g_yak_tuareg_tifi  g_yazh_tuareg_tifi  g_yas_tifi  
    g_yash_tifi  g_yat_tifi  g_yagh_tuareg_tifi  g_yaz_tawellemet_tifi  
    g_yaghh_tifi_v01  g_yaf_tifi_v01);
c_2d4f_cons_lig = (
    g_yanyaghh_lig_tifi  g_yanyaj_lig_tifi  g_yanyad_lig_tifi  g_yanyadh_lig_tifi  g_yanyadd_lig_tifi  
    g_yanyaf_lig_tifi  g_yanyak_tuareg_lig_tifi  g_yanyazh_tuareg_lig_tifi  g_yanyas_lig_tifi  
    g_yanyash_lig_tifi  g_yanyat_lig_tifi  g_yanyagh_tuareg_lig_tifi  g_yanyaz_tawellemet_lig_tifi
    g_yanyaghh_lig_tifi_v01  g_yanyaf_lig_tifi_v01);

// Components and ligature classes with ending glyph Tuareg YAK (U+2D3E)
c_cons_2d3e_comp = (g_yal_tifi  g_yal_tifi_slant  g_yal_tifi_raised  g_yar_tifi  g_yas_tifi  g_yash_tifi);
c_cons_2d3e_lig = (g_yalyak_tuareg_lig_tifi  g_yalyak_tuareg_lig_tifi  g_yalyak_tuareg_lig_tifi  g_yaryak_tuareg_lig_tifi  g_yasyak_tuareg_lig_tifi  g_yashyak_tuareg_lig_tifi);

// Components and ligature classes with ending glyph YAT (U+2D5C)
c_cons_2d5c_comp = (
    g_yab_tifi  g_yaghh_tifi  g_yaj_tifi  g_yaf_tifi  g_yah_tifi
    g_yi_tifi  g_yazh_ahaggar_tifi  g_yazh_tuareg_tifi  g_yal_tifi  g_yal_tifi_slant  g_yal_tifi_raised
    g_yam_tifi  g_yu_tifi  g_yar_tifi  g_yas_tifi  g_yash_tifi  g_yaz_tifi
    g_yaghh_tifi_v01  g_yaf_tifi_v01  g_yazh_ahaggar_tifi_v01  g_yu_tifi_v01  g_yaz_tifi_v01);
c_cons_2d5c_lig = (
    g_yabyat_lig_tifi  g_yaghhyat_lig_tifi  g_yajyat_lig_tifi  g_yafyat_lig_tifi  g_yahyat_lig_tifi
    g_yiyat_lig_tifi  g_yazh_ahaggaryat_lig_tifi  g_yazh_tuaregyat_lig_tifi  g_yalyat_lig_tifi  g_yalyat_lig_tifi  g_yalyat_lig_tifi
    g_yamyat_lig_tifi  g_yuyat_lig_tifi  g_yaryat_lig_tifi  g_yasyat_lig_tifi  g_yashyat_lig_tifi  g_yazyat_lig_tifi
    g_yaghhyat_lig_tifi_v01  g_yafyat_lig_tifi_v01  g_yazh_ahaggaryat_lig_tifi_v01  g_yuyat_lig_tifi_v02  g_yazyat_lig_tifi_v01);


endtable;  // glyph


table(sub)

pass(1)

    // The following is a debugging tool so you can find out whether the app is rendering with Graphite or not.
    // The string "RenderingUnknown" will be rendered as "RenderingGraphite":
    
    codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _               > 
    codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  / 
        codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;


// Raised vertical-bar characters:
// prevent substitution of third in sequence
cno_raised  >  craised  /  (g_yan_tifi g_yal_tifi)  _  (g_yan_tifi g_yal_tifi) {directionality == 1};  // RTL

endpass; // 1


pass(2)

// *Deprecated* Latin punctuation for Latin characters
// cno_latin  >  clatin  /  cNoTif  _ ;

// Raised vertical-bar characters:
cno_raised  >  craised  /  _  (g_yan_tifi g_yal_tifi) {directionality == 1};  // RTL
cno_raised  >  craised  /  (g_yan_tifi g_yal_tifi)  _ ;

// Slanted vertical-bar characters:
// cno_slant  >  cslant  /  (g_yan_tifi g_yal_tifi)  _ ;

// Use Tif version of diacs when they attach to Tif characters:
g_acutecomb     >  TifConsLengthMark_alt  /  cTakesTDia_base  _;
g_tildecomb       >  TifConsLengthMark      /  cTakesTDia_base  _;
(g_dotaccentcmb g_ringcmb)  >  TifVowelMark  /  cTakesTDia_base  _;

// SIL vowels for Tawallamat
g_ya_tifi  g_circumflexcmb > g_ya_s_i_la_tifi:(1 2) _ ;     // SIL vowel A
g_ya_tifi  g_brevecmb      > g_ya_s_i_lschwa_tifi:(1 2) _ ; // SIL vowel schwa
g_yay_tifi g_circumflexcmb > g_yay_s_i_le_tifi:(1 2) _ ;    // SIL vowel E
g_yay_tifi g_dotbelowcmb   > g_yay_s_i_li_tifi:(1 2) _ ;    // SIL vowel I
g_yo_tifi  g_circumflexcmb > g_yo_s_i_lo_tifi:(1 2) _ ;     // SIL vowel O
g_yu_tifi  g_circumflexcmb > g_yu_s_i_lu_tifi:(1 2) _ ;     // SIL vowel U


// Alternate character forms

if (f_2D30) // cv01
g_ya_tifi  >  g_ya_tifi_v01;
endif;

if (f_2D3C == 1) // cv02
g_yaf_tifi  >  g_yaf_tifi_v01;
endif;
if (f_2D3C == 2)
g_yaf_tifi  >  g_yaf_tifi_v02;
endif;

if (f_2D34) // cv03
g_yaghh_tifi  >  g_yaghh_tifi_v01;
endif;

if (f_2D50) // cv04
g_yagn_tuareg_tifi  >  g_yagn_tuareg_tifi_v01;
endif;

if (f_2D53) // cv05
g_yu_tifi  >  g_yu_tifi_v01;
endif;

if (f_2D63) // cv06
g_yaz_tifi  >  g_yaz_tifi_v01;
endif;

if (f_2D4B) // cv07
g_yazh_ahaggar_tifi  >  g_yazh_ahaggar_tifi_v01;
endif;

if (f_2D31) // cv08
g_yab_tifi  >  g_yab_tifi_v01;
endif;

if (f_2D33) // cv09
g_yag_tifi  >  g_yag_tifi_v01;
endif;

if (f_2D36) // cv10
g_yaj_tifi  >  g_yaj_tifi_v01;
endif;

if (f_2D40) // cv11
g_yah_tifi  >  g_yah_tifi_v01;
endif;

if (f_2D5B) // cv12
g_yash_tifi  >  g_yash_tifi_v01;
endif;

if (f_2D5F) // cv13
g_yatt_tifi  >  g_yatt_tifi_v01;
endif;

if (f_2D38) // cv15
g_yadh_tifi  >  g_yadh_tifi_v01;
endif;

if (f_punct) // cv20
g_comma  >  g_comma_deco;
g_exclam >  g_exclam_deco;
g_period >  g_period_deco;
endif;

endpass; // 2


pass(3)   { Direction = RIGHT_TO_LEFT }

// Tri-consonant ligature
g_yan_tifi   g_consonantjoiner_tifi  g_yaf_tifi   g_consonantjoiner_tifi  g_yat_tifi  >  _  _  _  _ g_yanyafyat_lig_tifi:(1 2 3 4 5);

// Biconsonant ligatures

g_yam_tifi   g_consonantjoiner_tifi  g_yah_tifi  >  _  _  g_yamyah_lig_tifi:(1 2 3);
g_yam_tifi   g_consonantjoiner_tifi  g_yas_tifi  >  _  _  g_yamyas_lig_tifi:(1 2 3);
g_yar_tifi   g_consonantjoiner_tifi  g_yan_tifi  >  _  _  g_yaryan_lig_tifi:(1 2 3);
g_yas_tifi   g_consonantjoiner_tifi  g_yan_tifi  >  _  _  g_yasyan_lig_tifi:(1 2 3);
g_yash_tifi  g_consonantjoiner_tifi  g_yan_tifi  >  _  _  g_yashyan_lig_tifi:(1 2 3);

(g_yan_tifi  g_yan_tifi_raised)     g_consonantjoiner_tifi  c_2d4f_cons_comp  >  _  _  c_2d4f_cons_lig:(1 2 3);
(g_yan_tifi  g_yan_tifi_slant)      g_consonantjoiner_tifi  c_2d4f_cons_comp  >  _  _  c_2d4f_cons_lig:(1 2 3);
(g_yan_tifi  g_yan_tifi_slant_rtl)  g_consonantjoiner_tifi  c_2d4f_cons_comp  >  _  _  c_2d4f_cons_lig:(1 2 3);

c_cons_2d3e_comp  g_consonantjoiner_tifi  g_yak_tuareg_tifi  >  c_cons_2d3e_lig:(1 2 3)  _  _;
c_cons_2d5c_comp  g_consonantjoiner_tifi  g_yat_tifi  >  c_cons_2d5c_lig:(1 2 3)  _  _;

endpass;  // 3


pass(4)

// Tri-consonant ligature
g_yan_tifi   g_consonantjoiner_tifi  g_yaf_tifi   g_consonantjoiner_tifi  g_yat_tifi  >  _  _  _  _ g_yanyafyat_lig_tifi:(1 2 3 4 5);

// Biconsonant ligatures (left to right)

g_yam_tifi   g_consonantjoiner_tifi  g_yah_tifi  >  _  _  g_yamyah_lig_tifi:(1 2 3);
g_yam_tifi   g_consonantjoiner_tifi  g_yas_tifi  >  _  _  g_yamyas_lig_tifi:(1 2 3);
g_yar_tifi   g_consonantjoiner_tifi  g_yan_tifi  >  _  _  g_yaryan_lig_tifi:(1 2 3);
g_yas_tifi   g_consonantjoiner_tifi  g_yan_tifi  >  _  _  g_yasyan_lig_tifi:(1 2 3);
g_yash_tifi  g_consonantjoiner_tifi  g_yan_tifi  >  _  _  g_yashyan_lig_tifi:(1 2 3);

(g_yan_tifi  g_yan_tifi_raised)     g_consonantjoiner_tifi  c_2d4f_cons_comp  >  _  _  c_2d4f_cons_lig:(1 2 3);
(g_yan_tifi  g_yan_tifi_slant)      g_consonantjoiner_tifi  c_2d4f_cons_comp  >  _  _  c_2d4f_cons_lig:(1 2 3);
(g_yan_tifi  g_yan_tifi_slant_rtl)  g_consonantjoiner_tifi  c_2d4f_cons_comp  >  _  _  c_2d4f_cons_lig:(1 2 3);

c_cons_2d3e_comp  g_consonantjoiner_tifi  g_yak_tuareg_tifi  >  c_cons_2d3e_lig:(1 2 3)  _  _;
c_cons_2d5c_comp  g_consonantjoiner_tifi  g_yat_tifi  >  c_cons_2d5c_lig:(1 2 3)  _  _;

endpass;  // 4


pass(5)

if (f_2D31_2D5C) // cv31
g_yabyat_lig_tifi  >  g_yabyat_lig_tifi_v01;
endif;

if (f_2D54_2D5C == 1) // cv32
g_yaryat_lig_tifi  >  g_yaryat_lig_tifi_v01;
endif;
if (f_2D54_2D5C == 2) // cv32
g_yaryat_lig_tifi  >  g_yaryat_lig_tifi_v02;
endif;

if (f_2D59_2D5C == 1) // cv33
g_yasyat_lig_tifi  >  g_yasyat_lig_tifi_v01;
endif;
if (f_2D59_2D5C == 2) // cv33
g_yasyat_lig_tifi  >  g_yasyat_lig_tifi_v02;
endif;

if (f_2D4E_2D5C) // cv34
g_yamyat_lig_tifi  >  g_yamyat_lig_tifi_v01;
endif;

if (f_2D3C_2D5C == 1) // cv35
g_yafyat_lig_tifi  >  g_yafyat_lig_tifi_v02;
endif;
if (f_2D3C_2D5C == 2) // cv35
g_yafyat_lig_tifi  >  g_yafyat_lig_tifi_v03;
endif;
if (f_2D3C_2D5C == 3) // cv35
g_yafyat_lig_tifi  >  g_yafyat_lig_tifi_v04;
endif;

if (f_2D4F_2D3E) // cv36
g_yanyak_tuareg_lig_tifi  >  g_yanyak_tuareg_lig_tifi_v01;
endif;

if (f_2D4F_2D5C == 1) // cv37
g_yanyat_lig_tifi  >  g_yanyat_lig_tifi_v01;
endif;
if (f_2D4F_2D5C == 2) // cv37
g_yanyat_lig_tifi  >  g_yanyat_lig_tifi_v02;
endif;

if (f_2D4D_2D5C == 1) // cv38
g_yalyat_lig_tifi  >  g_yalyat_lig_tifi_v01;
endif;
if (f_2D4D_2D5C == 2) // cv38
g_yalyat_lig_tifi  >  g_yalyat_lig_tifi_v02;
endif;
if (f_2D4D_2D5C == 3) // cv38
g_yalyat_lig_tifi  >  g_yalyat_lig_tifi_v03;
endif;

if (f_2D53_2D5C == 1) // cv39
g_yuyat_lig_tifi  >  g_yuyat_lig_tifi_v01;
endif;
if (f_2D53_2D5C == 2) // cv39
g_yuyat_lig_tifi  >  g_yuyat_lig_tifi_v03;
endif;

if (f_2D4C_2D5C == 1) // cv40
g_yazh_tuaregyat_lig_tifi  >  g_yazh_tuaregyat_lig_tifi_v01;
endif;
if (f_2D4C_2D5C == 2) // cv40
g_yazh_tuaregyat_lig_tifi  >  g_yazh_tuaregyat_lig_tifi_v02;
endif;

if (f_2D4F_2D37) // cv41
g_yanyad_lig_tifi  >  g_yanyad_lig_tifi_v01;
endif;

if (f_2D4F_2D3C == 1) // cv42
g_yanyaf_lig_tifi  >  g_yanyaf_lig_tifi_v02;
endif;
if (f_2D4F_2D3C == 2) // cv42
g_yanyaf_lig_tifi  >  g_yanyaf_lig_tifi_v03;
endif;

if (f_2D4F_2D36) // cv43
g_yanyaj_lig_tifi  >  g_yanyaj_lig_tifi_v01;
endif;

if (f_2D4F_2D59) // cv44
g_yanyas_lig_tifi  >  g_yanyas_lig_tifi_v01;
endif;

if (f_2D4F_2D4C) // cv45
g_yanyazh_tuareg_lig_tifi  >  g_yanyazh_tuareg_lig_tifi_v01;
endif;

endpass;  // 5


pass(6)

cno_rtl  >  crtl / _ {directionality == 1};  // sub LTR with RTL glyphs

endpass;  // 6


endtable;  // substitution


/////////////////////////////////
//
//  Diacritic attachments
//
/////////////////////////////////

#define attached    user1
#define DIASTR4(x) [ x [ x [ x x?]?]?]?

table(pos)

//#define pos_rule(t, x, a, w, n) t x {attach {to = @1; at = a; with = w}; attached = 1} / ^ _ DIASTR4(n) _{attached == 0}
#define pos_ruleSD(t, x, a, w, n) t x {attach {to = @1; at = a; with = w}; insert = 1; attached = 1} / ^ _ DIASTR4(n) _{attached == 0}

// Latin
    pos_ruleSD(cTakesaboveLCDia, caboveLCDia, aboveLCS, aboveLCM, cnaboveLCDia);      // Diacritics above on lowercase
    pos_ruleSD(cTakesaboveUCDia, caboveUCDia, aboveUCS, aboveUCM, cnaboveUCDia);      // Diacritics above on uppercase
    pos_ruleSD(cTakesbelowLCDia, cbelowLCDia, belowLCS, belowLCM, cnbelowLCDia);      // Diacritics below
    pos_ruleSD(cTakesbaseLCDia, cbaseLCDia, baseLCS, baseLCM, cnbaseLCDia);           // Cedilla
    pos_ruleSD(cTakesogonekLCDia, cogonekLCDia, ogonekLCS, ogonekLCM, cnogonekLCDia); // Ogonek

// Tifinagh
    pos_ruleSD(cTakesTDia, cTDia, TS, TM, cnTDia); // Diacritics on Tifinagh bases

endtable; // positioning
