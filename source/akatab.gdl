/***************************************************************************

	Akatab.gdl
	Graphite source code for Akatab

***************************************************************************/

#include "stddef.gdh"
ScriptDirection = HORIZONTAL_LEFT_TO_RIGHT;
Bidi = true;

/////////////////////////////////
//
//  Features
//
/////////////////////////////////

#define bool default = ffalse; \
    settings { \
        ffalse { \
            value = 0; \
            name.1033 = string("False"); \
        } \
        ftrue { \
            value = 1; \
            name.1033 = string("True"); \
        } \
    }

#define boolWDefTrue default = ftrue; \
    settings { \
        ftrue { \
            value = 0; \
            name.1033 = string("True"); \
        } \
        ffalse { \
            value = 1; \
            name.1033 = string("False"); \
        } \
    }

table(feature)

f_2D30 {
	id = "cv01";
	name.1033 = string("Alternate YA (empty circle)");  // A
	bool
}

f_2D3C {
	id = "cv02";
	name.1033 = string("Alternate YAF (I-shape)");  // F
	bool
}

f_2D34 {
	id = "cv03";
	name.1033 = string("Alternate YAGHH (round bottom)");  // GHH
	bool
}

f_2D50 {
	id = "cv04";
	name.1033 = string("Alternate YAGN (lowered bottom stroke)");  // GN
	bool
}

f_2D53 {
	id = "cv05";
	name.1033 = string("Alternate YU (short strokes)");  // W
	bool
}

f_2D63 {
	id = "cv06";
	name.1033 = string("Alternate YAZ (squared)");  // Z
	bool
}

f_2D4B {
	id = "cv07";
	name.1033 = string("Alternate AHAGGAR YAZH (squared)");  // ZH
	bool
}

f_punct {
	id = "cv20";
	name.1033 = string("Alternate comma exclam and period");  // from publications circa 1954
	bool
}


// Biconsonant features

f_2D31_2D5C {
	id = "cv31";
	name.1033 = string("Alternate YAB YAT");  // BT
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (exterior T)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate (interior T)");
		}
	}
}

f_2D54_2D5C {
	id = "cv32";
	name.1033 = string("Alternate YAR YAT");  // RT
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (exterior T)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate 1 (large interior T)");
		}
		alt2 {
			value = 2;
			name.1033 = string("Alternate 2 (small interior T)");
		}
	}
}

f_2D59_2D5C {
	id = "cv33";
	name.1033 = string("Alternate YAS YAT");  // ST
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (exterior T)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate 1 (large interior T)");
		}
		alt2 {
			value = 2;
			name.1033 = string("Alternate 2 (small interior T)");
		}
	}
}

f_2D4E_2D5C {
	id = "cv34";
	name.1033 = string("Alternate YAM YAT");  // MT
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (low T)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate (middle T)");
		}
	}
}

f_2D3C_2D5C {
	id = "cv35";
	name.1033 = string("Alternate YAF YAT");  // FT
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (low T)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate (middle T)");
		}
	}
}

f_2D4F_2D3E {
	id = "cv36";
	name.1033 = string("Alternate YAN YAK");  // NK
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (single dot cluster)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate (double dot cluster)");
		}
	}
}

f_2D4F_2D5C {
	id = "cv37";
	name.1033 = string("Alternate YAN YAT");  // NT
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (side T)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate 1 (side bar)");
		}
		alt2 {
			value = 2;
			name.1033 = string("Alternate 2 (top bar)");
		}
	}
}

f_2D4D_2D5C {
	id = "cv38";
	name.1033 = string("Alternate YAL YAT");  // LT
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (external T)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate (internal T)");
		}
	}
}

f_2D53_2D5C {
	id = "cv39";
	name.1033 = string("Alternate YU YAT");  // WT
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (short)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate (tall)");
		}
	}
}

f_2D4C_2D5C {
	id = "cv40";
	name.1033 = string("Alternate Tuareg YAZH YAT");  // ZZHT
	default = 0;
	settings {
		alt0 {
			value = 0;
			name.1033 = string("Standard (lower-right T)");
		}
		alt1 {
			value = 1;
			name.1033 = string("Alternate 1 (mid-right T)");
		}
		alt2 {
			value = 2;
			name.1033 = string("Alternate 2 (centered T)");
		}
	}
}

endtable; // feature

/////////////////////////////////
//
//  Subsitutions
//
/////////////////////////////////

table(glyph)

// Biconsonant ligatures

c_2d4f_cons = (g_yaghh_tifi  g_yaj_tifi  g_yad_tifi  g_yadh_tifi  g_yaf_tifi  g_yak_tuareg_tifi  g_yas_tifi  g_yash_tifi  g_yat_tifi
	g_yaghh_tifi_alt  g_yaf_tifi_alt);
c_2d4f_cons_lig = (
	g_yanyaghh_lig_tifi  g_yanyaj_lig_tifi  g_yanyad_lig_tifi  g_yanyadh_lig_tifi
	g_yanyaf_lig_tifi  g_yanyak_tuareg_lig_tifi  g_yanyas_lig_tifi  g_yanyash_lig_tifi  g_yanyat_lig_tifi
	g_yanyaghh_lig_tifi_alt  g_yanyaf_lig_tifi_alt);

c_cons_2d3e = (g_yal_tifi  g_yal_tifi_slant  g_yal_tifi_raised  g_yar_tifi  g_yas_tifi  g_yash_tifi);
c_cons_2d3e_lig = (g_yalyak_tuareg_lig_tifi  g_yalyak_tuareg_lig_tifi  g_yalyak_tuareg_lig_tifi  g_yaryak_tuareg_lig_tifi  g_yasyak_tuareg_lig_tifi  g_yashyak_tuareg_lig_tifi);

c_cons_2d5c = (
	g_yab_tifi  g_yaghh_tifi  g_yaj_tifi  g_yaf_tifi  g_yah_tifi
	g_yi_tifi  g_yazh_ahaggar_tifi  g_yazh_tuareg_tifi  g_yal_tifi  g_yal_tifi_slant  g_yal_tifi_raised
	g_yam_tifi  g_yu_tifi  g_yar_tifi  g_yas_tifi  g_yash_tifi  g_yaz_tifi
	g_yaghh_tifi_alt  g_yaf_tifi_alt  g_yazh_ahaggar_tifi_alt  g_yu_tifi_alt  g_yaz_tifi_alt  );
c_cons_2d5c_lig = (
	g_yabyat_lig_tifi  g_yaghhyat_lig_tifi  g_yajyat_lig_tifi  g_yafyat_lig_tifi  g_yahyat_lig_tifi
	g_yiyat_lig_tifi  g_yazh_ahaggaryat_lig_tifi  g_yazhyat_lig_tifi  g_yalyat_lig_tifi  g_yalyat_lig_tifi  g_yalyat_lig_tifi
	g_yamyat_lig_tifi  g_yuyat_lig_tifi  g_yaryat_lig_tifi  g_yasyat_lig_tifi  g_yashyat_lig_tifi  g_yazyat_lig_tifi
	g_yaghhyat_lig_tifi_alt  g_yafyat_lig_tifi_alt  g_yazh_ahaggaryat_lig_tifi_alt  g_yuyat_lig_tifi_alt2
	g_yazyat_lig_tifi_alt);


endtable;  // glyph


table(sub)

pass(1)

// Raised vertical-bar characters:
// prevent substitution of third in sequence
cno_raised  >  craised  /  (g_yan_tifi g_yal_tifi)  _  (g_yan_tifi g_yal_tifi) {directionality == 1};  // RTL

endpass; // 1


pass(2)

// *Deprecated* Latin punctuation for Latin characters
// cno_latin  >  clatin  /  cNoTif  _ ;

// Raised vertical-bar characters:
cno_raised  >  craised  /  _  (g_yan_tifi g_yal_tifi) {directionality == 1};  // RTL
cno_raised  >  craised  /  (g_yan_tifi g_yal_tifi)  _ ;

// Slanted vertical-bar characters:
// cno_slant  >  cslant  /  (g_yan_tifi g_yal_tifi)  _ ;

// Use Tif version of diacs when they attach to Tif characters:
g_acutecomb     >  TifConsLengthMark_alt  /  cTakesTDia_base  _;
g_tildecomb       >  TifConsLengthMark      /  cTakesTDia_base  _;
(g_dotaccentcmb g_ringcmb)  >  TifVowelMark  /  cTakesTDia_base  _;

// SIL vowels for Tawallamat
g_ya_tifi  g_circumflexcmb > g_ya_s_i_la_tifi:(1 2) _ ;     // SIL vowel A
g_ya_tifi  g_brevecmb      > g_ya_s_i_lschwa_tifi:(1 2) _ ; // SIL vowel schwa
g_yay_tifi g_circumflexcmb > g_yay_s_i_le_tifi:(1 2) _ ;    // SIL vowel E
g_yay_tifi g_dotbelowcmb   > g_yay_s_i_li_tifi:(1 2) _ ;    // SIL vowel I
g_yo_tifi  g_circumflexcmb > g_yo_s_i_lo_tifi:(1 2) _ ;     // SIL vowel O
g_yu_tifi  g_circumflexcmb > g_yu_s_i_lu_tifi:(1 2) _ ;     // SIL vowel U


// Alternate character forms

if (f_2D30)
g_ya_tifi  >  g_ya_tifi_alt;
endif;

if (f_2D3C)
g_yaf_tifi  >  g_yaf_tifi_alt;
endif;

if (f_2D34)
g_yaghh_tifi  >  g_yaghh_tifi_alt;
endif;

if (f_2D50)
g_yagn_tuareg_tifi  >  g_yagn_tuareg_tifi_alt;
endif;

if (f_2D53)
g_yu_tifi  >  g_yu_tifi_alt;
endif;

if (f_2D63)
g_yaz_tifi  >  g_yaz_tifi_alt;
endif;

if (f_2D4B)
g_yazh_ahaggar_tifi  >  g_yazh_ahaggar_tifi_alt;
endif;

if (f_punct)
g_comma  >  g_comma_alt;
g_exclam >  g_exclam_alt;
g_period >  g_period_alt;
endif;

endpass; // 2


pass(3)   { Direction = RIGHT_TO_LEFT }

// Biconsonant ligatures

(g_yan_tifi  g_yan_tifi_raised)  g_consonantjoiner_tifi  c_2d4f_cons  >  _  _  c_2d4f_cons_lig:(1 2 3);
(g_yan_tifi  g_yan_tifi_slant)  g_consonantjoiner_tifi  c_2d4f_cons  >  _  _  c_2d4f_cons_lig:(1 2 3);
(g_yan_tifi  g_yan_tifi_slant_rtl)  g_consonantjoiner_tifi  c_2d4f_cons  >  _  _  c_2d4f_cons_lig:(1 2 3);

c_cons_2d3e  g_consonantjoiner_tifi  g_yak_tuareg_tifi  >  c_cons_2d3e_lig:(1 2 3)  _  _;
c_cons_2d5c  g_consonantjoiner_tifi  g_yat_tifi  >  c_cons_2d5c_lig:(1 2 3)  _  _;

endpass;  // 3


pass(4)

// Biconsonant ligatures

(g_yan_tifi  g_yan_tifi_raised)  g_consonantjoiner_tifi  c_2d4f_cons  >  _  _  c_2d4f_cons_lig:(1 2 3);
(g_yan_tifi  g_yan_tifi_slant)  g_consonantjoiner_tifi  c_2d4f_cons  >  _  _  c_2d4f_cons_lig:(1 2 3);
(g_yan_tifi  g_yan_tifi_slant_rtl)  g_consonantjoiner_tifi  c_2d4f_cons  >  _  _  c_2d4f_cons_lig:(1 2 3);

c_cons_2d3e  g_consonantjoiner_tifi  g_yak_tuareg_tifi  >  c_cons_2d3e_lig:(1 2 3)  _  _;
c_cons_2d5c  g_consonantjoiner_tifi  g_yat_tifi  >  c_cons_2d5c_lig:(1 2 3)  _  _;

endpass;  // 4


pass(5)

if (f_2D31_2D5C)
g_yabyat_lig_tifi  >  g_yabyat_lig_tifi_alt;
endif;

if (f_2D54_2D5C == 1)
g_yaryat_lig_tifi  >  g_yaryat_lig_tifi_alt;
endif;
if (f_2D54_2D5C == 2)
g_yaryat_lig_tifi  >  g_yaryat_lig_tifi_alt2;
endif;

if (f_2D59_2D5C == 1)
g_yasyat_lig_tifi  >  g_yasyat_lig_tifi_alt;
endif;
if (f_2D59_2D5C == 2)
g_yasyat_lig_tifi  >  g_yasyat_lig_tifi_alt2;
endif;

if (f_2D4E_2D5C)
g_yamyat_lig_tifi  >  g_yamyat_lig_tifi_alt;
endif;

if (f_2D3C_2D5C)
g_yafyat_lig_tifi  >  g_yafyat_lig_tifi_alt2;
endif;

if (f_2D4F_2D3E)
g_yanyak_tuareg_lig_tifi  >  g_yanyak_tuareg_lig_tifi_alt;
endif;

if (f_2D4F_2D5C == 1)
g_yanyat_lig_tifi  >  g_yanyat_lig_tifi_alt;
endif;
if (f_2D4F_2D5C == 2)
g_yanyat_lig_tifi  >  g_yanyat_lig_tifi_alt2;
endif;

if (f_2D4D_2D5C)
g_yalyat_lig_tifi  >  g_yalyat_lig_tifi_alt;
endif;

if (f_2D53_2D5C)
g_yuyat_lig_tifi  >  g_yuyat_lig_tifi_alt;
endif;

if (f_2D4C_2D5C == 1)
g_yazhyat_lig_tifi  >  g_yazhyat_lig_tifi_alt;
endif;
if (f_2D4C_2D5C == 2)
g_yazhyat_lig_tifi  >  g_yazhyat_lig_tifi_alt2;
endif;

endpass;  // 5


pass(6)

cno_rtl	>	crtl / _ {directionality == 1};  // sub LTR with RTL glyphs

endpass;  // 6


endtable;  // substitution


/////////////////////////////////
//
//  Diacritic attachments
//
/////////////////////////////////

#define attached	user1
#define DIASTR4(x) [ x [ x [ x x?]?]?]?

table(pos)

//#define pos_rule(t, x, a, w, n) t x {attach {to = @1; at = a; with = w}; attached = 1} / ^ _ DIASTR4(n) _{attached == 0}
#define pos_ruleSD(t, x, a, w, n) t x {attach {to = @1; at = a; with = w}; insert = 1; attached = 1} / ^ _ DIASTR4(n) _{attached == 0}

// Latin
	pos_ruleSD(cTakesaboveLCDia, caboveLCDia, aboveLCS, aboveLCM, cnaboveLCDia);      // Diacritics above on lowercase
	pos_ruleSD(cTakesaboveUCDia, caboveUCDia, aboveUCS, aboveUCM, cnaboveUCDia);      // Diacritics above on uppercase
	pos_ruleSD(cTakesbelowLCDia, cbelowLCDia, belowLCS, belowLCM, cnbelowLCDia);      // Diacritics below
	pos_ruleSD(cTakesbaseLCDia, cbaseLCDia, baseLCS, baseLCM, cnbaseLCDia);           // Cedilla
	pos_ruleSD(cTakesogonekLCDia, cogonekLCDia, ogonekLCS, ogonekLCM, cnogonekLCDia); // Ogonek

// Tifinagh
	pos_ruleSD(cTakesTDia, cTDia, TS, TM, cnTDia); // Diacritics on Tifinagh bases

endtable; // positioning
